/* Program 1 : Getting address of a variable.
	Note: Ampersand(&) before variable name generates its starting address */


#include <stdio.h>
void main()
{
	int x=5, y;
	printf("\nStarting address of the variable, x = %u",&x);
	printf("\nContents of x = %d",x);
	printf("\nStarting address of the variable, y = %u\n",&y);
}
Output:

Starting address of the variable, x = 1244884
Contents of x = 5
Starting address of the variable, y = 1244872
Press any key to continue

/* Program 2 : Accessing the contents of a variable through its address 
	Note: Indirection operator (*) can be placed only before the pointer variables.
Indirection operator(*) before a pointer variable always indicates contents of the variable
pointed by the pointer variable.
*/

#include <stdio.h>
void main()
{
	int x=5, y;
	int *ip;

	ip = &x;
	y = *ip;	// y = x ==> y = 5;
	printf("\nx = %d, y = %d\n",x, y);

}
Output : 

x = 5, y = 5
Press any key to continue

/* Program 3 : Finding no.of bytes occupied by the pointer variable using sizeof operator.
	Note: pointer variables occupies only 4 bytes of memory irrespective of where
they are pointing to. */

#include <stdio.h>
void main()
{
	char op, *cp;
	int *ip;
	float* fp;
	double* dp;

	printf("\nNo.of bytes occupied by an integer variable = %d",sizeof(int));
	printf("\nNo.of bytes occupied by the character variable , op = %d",sizeof(op));
	printf("\nNo.of bytes occupied by the float variable = %d",sizeof(float));
	printf("\nNo.of bytes occupied by the long float variable = %d",sizeof(long float));
	printf("\nNo.of bytes occupied by the double variable = %d",sizeof(double));
	printf("\nNo.of bytes occupied by the long double variable = %d",sizeof(long double));

	printf("\n\nNo.of bytes occupied by the pointer variable , cp = %d",sizeof(cp));
	printf("\nNo.of bytes occupied by the pointer variable , fp = %d",sizeof(fp));
	printf("\nNo.of bytes occupied by the pointer variable , ip = %d",sizeof(ip));
	printf("\nNo.of bytes occupied by the pointer variable , dp = %d\n\n",sizeof(dp));
}

Output :

No.of bytes occupied by an integer variable = 4
No.of bytes occupied by the character variable , op = 1
No.of bytes occupied by the float variable = 4
No.of bytes occupied by the long float variable = 8
No.of bytes occupied by the double variable = 8
No.of bytes occupied by the long double variable = 8

No.of bytes occupied by the pointer variable , cp = 4
No.of bytes occupied by the pointer variable , fp = 4
No.of bytes occupied by the pointer variable , ip = 4
No.of bytes occupied by the pointer variable , dp = 4

Press any key to continue

/* Program 4 : Passing by Value.
	Note: Passing the contents of the variables from the calling function to the called function is called as Passing by Value. */

#include <stdio.h>
void main()
{
	int num = 10;
	int modify(int);	// function prototype

	printf("\nnum = %d", num);
	num = modify(num);
	printf("\nnum = %d\n", num);
}

int modify(int n)
{
	n = n+10;
	return n;
}
Output :

num = 10
num = 20
Press any key to continue

/* Program 5 : Passing by Reference.
	Note: Passing the addresses of the variables from the calling function to the called function is called as Passing by Reference. 
	Indirection operator (*) can be placed on the left side or on the right side of the assignment operator.
*/

#include <stdio.h>
void main()
{
	int num=10;
	void modify(int *);	// function prototype

	printf("\nnum = %d", num);
	modify(&num);
	printf("\nnum = %d\n", num);
}

void modify(int *ip)
{
	*ip = *ip+10;
}

Output : 

num = 10
num = 20
Press any key to continue

/* Program 6 : Pointer Arithmetic. */

#include <stdio.h>
void main()
{
	int x, y, z;
	int *ip1, *ip2, *ip3;

	ip1 = &x;
	ip2 = &y;
	ip3 = &z;

	*ip1 = 6;		// *ip1 = x = 6;
	*ip2 = 4;		// *ip2 = y =4;
	*ip3 = *ip1 * (*ip2);	// z = x * y = 6*4 = 24; *ip3 = z;

	printf("\nx = %d , y = %d , z = %d",x, y, z);

	*ip1 = *ip1 + *ip2 + *ip3;	// x = x+y+z = 6+4+24=34;
	*ip2 = *ip1/(*ip2);		// y = x/y = 34/4 = 8;
	*ip3 = *ip1 + *ip2;		// z = x+y = 34+8 = 42;

	printf("\nx = %d, y = %d , z = %d\n\n",x, y, z);
}

Output : 

x = 6 , y = 4 , z = 24
x = 34, y = 8 , z = 42

Press any key to continue

/* Program 7 : Program to find the average of two numbers using pointers. */

#include <stdio.h>
void main()
{
	int x, y;
	float res;

	void average(int*, int*, float*);	// function prototype

	printf("\nEnter two integer values\n");
	scanf("%d%d",&x, &y);
	
	average(&x, &y, &res);	// pass by reference

	printf("\nAverage value = %.2f\n",res);
}

void average(int*  ip1, int* ip2, float* fp)
{
	*fp = (*ip1 + *ip2)/2.0;
}

Output : 

Enter two integer values
15
16

Average value = 15.50
Press any key to continue

/* Program 8 : Manipulating arrays through pointers.
	Note: The name of the array itself is its starting address. */

#include <stdio.h>
void main()
{
	int num[5];
	int i, *ip;
	ip = num;

	printf("\nEnter 5 integer values\n");
	for(i=0; i<5; i++)
	{
		scanf("%d",(ip+i));	
		/*
		   Whenever an integer value is added to an address, the new address is 				based on the following formula:
			new address = base address(i.e., starting address) + 
			(increment value * no.of bytes occupied by each element)
		*/

		// scanf("%d",&num[i]); 
		// scanf("%d",&ip[i]);
		// scanf("%d",(num+i));
	}

	printf("\nContents of the array\n");
	for(i=0; i<5; i++)
	{
		printf("\t%d\n",*(ip+i));	
		// printf("\t%d\n",num[i]);
		//printf("\t%d\n",ip[i]);		
		// ip[i] = *(ip+i) = i[ip] = *(i+ip)
	}
	printf("\n\n");
}

Output :

Enter 5 integer values
50
40
30
20
10

Contents of the array
        50
        40
        30
        20
        10


Press any key to continue

/* Program 9 : Accepting and Displaying the numbers using pointers. */

#include <stdio.h>
void main()
{
	int num[20], sz;
	char ch='y';
	
	void enter(int* , int);		// function prototype
	void disp(int*, int);

	do
	{
		if(ch == 'y')
			printf("\nEnter size of the array(max. 20) : ");
		else
		{
			printf("\n%d is invalid input. 0 or Negative numbers are not accepted.",sz);
			printf("\nEnter the valid size of the array(in between 1 to 20 only) : ");
		}
		scanf("%d",&sz);
		if(sz <=0 || sz>20)
			ch='n';
	}while(sz<=0 || sz>20);

	enter(num, sz);
	disp(num, sz);
	printf("\n\n");
}

void enter(int* ip, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("\tEnter value %d : ",i+1);
		scanf("%d",(ip+i));
	}
}

void disp(int *ip, int sz)
{
	printf("\n");
	for(int i=0; i<sz; i++)
	{
		//printf("%d\t",*(ip+i));
		// printf("%d\t",ip[i]);
		 printf("%d\t",i[ip]);
	}
}

Output :

Enter size of the array(max. 20) : 0

0 is invalid input. 0 or Negative numbers are not accepted.
Enter the valid size of the array(in between 1 to 20 only) : -6

-6 is invalid input. 0 or Negative numbers are not accepted.
Enter the valid size of the array(in between 1 to 20 only) : 6
        Enter value 1 : 60
        Enter value 2 : 50
        Enter value 3 : 40
        Enter value 4 : 30
        Enter value 5 : 20
        Enter value 6 : 10

60      50      40      30      20      10

Press any key to continue

/* Program 10 : Pointer variables can be subscripted.
	Note: subscripting a pointer variable indicates contents of each element of
the array. ip[i] = *(ip+i);
*/


#include <stdio.h>

void main()
{
	int num[5] = {10,20,30,40,50};
	int* ip;
	
	for(int i=0; i<5; i++)
		printf("\nnum[%d] = %d",i, num[i]);

	ip = num;
	ip[0] = 100;
	ip[3] = 400;

	for(i=0; i<5; i++)
	{
		printf("\n\tip[%d] = %d\tnum[%d] = %d",i, ip[i], i, num[i]);
		// printf("\n\tip[%d] = %d",i, num[i]);
	}
	printf("\n\n");
}

Output :

num[0] = 10
num[1] = 20
num[2] = 30
num[3] = 40
num[4] = 50
        ip[0] = 100     num[0] = 100
        ip[1] = 20      num[1] = 20
        ip[2] = 30      num[2] = 30
        ip[3] = 400     num[3] = 400
        ip[4] = 50      num[4] = 50

Press any key to continue

/* Program 11 : Assignment.
	Accept the numbers from user and display its average, above average, minimum and maximum value using pointers.
*/

#include <stdio.h>
void main()
{
	int num[20], sz;
	float avg;
	int min, max;
	char ch='y';

	void enter(int *, int);		// function prototype
	void disp(int*, int);
	float average(int*, int);
	void dispAboveAverage(int*, int, float);
	int minValue(int*, int);
	int maxValue(int*, int);
	do
	{
		if(ch == 'y')
			printf("\nEnter size of the array(max. 20) : ");
		else
		{
			printf("\n%d is invalid input. 0 or Negative numbers are not accepted.",sz);
			printf("\nEnter the valid size of the array(in between 1 to 20 only) : ");
		}
		scanf("%d",&sz);
		if(sz <=0 || sz>20)
			ch='n';
	}while(sz<=0 || sz>20);

	enter(num, sz);
	printf("\nThe following are the entered values\n");
	disp(num, sz);

	avg = average(num , sz);
	printf("\n\nAverage value = %.3f\n",avg);

	printf("\nThe following are the values which are above the average value\n");
	dispAboveAverage(num, sz, avg);
	min = minValue(num, sz);
	max = maxValue(num, sz);

	printf("\nMinimum value = %d",min);
	printf("\nMaximum value = %d\n",max);

	printf("\n");
}

void enter(int* ip, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("\tEnter value %d : ",i+1);
		scanf("%d",(ip+i));
	}
}

void disp(int *ip, int sz)
{
	printf("\n");
	for(int i=0; i<sz; i++)
	{
		//printf("%d\t",*(ip+i));
		// printf("%d\t",ip[i]);
		 printf("%d\t",i[ip]);
	}
}

float average(int *ip, int sz)
{
	int sum = 0;
	float avg;
	for(int i=0; i<sz; i++)
	{
		sum += ip[i];	
		// sum = sum + ip[i];
		// sum = sum + *(ip+i);
	}
	avg = (float)sum/sz;
	return avg;
}

void dispAboveAverage(int *ip, int sz, float avg)
{
	for(int i=0; i<sz; i++)
		if(ip[i] >= avg)
			printf("%d\t",ip[i]);
}

int minValue(int* ip, int sz)
{
	int min = ip[0];	// int min = *(ip+0);
	for(int i=1; i<sz; i++)
		if(ip[i] < min)
			min = ip[i];

	return min;
}

int maxValue(int* ip, int sz)
{
	int max = ip[0];
	for(int i=1; i<sz; i++)
		if(ip[i] > max)
			max = ip[i];

	return max;
}

Output :

Enter size of the array(max. 20) : -7

-7 is invalid input. 0 or Negative numbers are not accepted.
Enter the valid size of the array(in between 1 to 20 only) : 0

0 is invalid input. 0 or Negative numbers are not accepted.
Enter the valid size of the array(in between 1 to 20 only) : 7
        Enter value 1 : 69
        Enter value 2 : -58
        Enter value 3 : 73
        Enter value 4 : 26
        Enter value 5 : 49
        Enter value 6 : -98
        Enter value 7 : 84

The following are the entered values

69      -58     73      26      49      -98     84

Average value = 20.714

The following are the values which are above the average value
69      73      26      49      84
Minimum value = -98
Maximum value = 84

Press any key to continue

/* Program 12 : Using pointers, finding the minimum and maximum values of the given numbers. */

#include <stdio.h>

void main()
{
	int num[20], sz;
	int min, max;
	char ch='y';

	void enter(int*, int);
	void minValue(int*, int, int*);
	void maxValue(int*, int, int*);

	do
	{
		if(ch == 'y')
			printf("\nEnter no.of values(max. 20) : ");
		else
		{
			printf("\n%d is invalid input.", sz);
			printf("\nEnter valid no.of values(max. 20 only) : ");
		}
		
		scanf("%d",&sz);
		if(sz <=0 || sz>20)
			ch = 'n';
	}while(sz<=0 || sz>20);

	enter(num, sz);
	minValue(num, sz, &min);
	maxValue(num, sz, &max);

	printf("\nMinimum value = %d\nMaximum value = %d\n",min, max);
	printf("\n");
}

void enter(int *ip, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("\tEnter value %d :  ",i+1);
		scanf("%d",(ip+i));
		// scanf("%d",&ip[i]);
	}
}
/*
		// Method 1
void minValue(int* ip, int sz, int* pmin)
{
	int min = ip[0];
	for(int i=1; i<sz; i++)
		if(ip[i] < min)
			min = ip[i];

	*pmin = min;
}

*/
/* Method 2 */
void minValue(int* ip, int sz, int* pmin)
{
	*pmin = ip[0];
	for(int i=1; i<sz; i++)
		if(ip[i] < *pmin)
			*pmin = ip[i];
}

/*
		// Method 1
void maxValue(int* ip, int sz, int* pmax)
{
	int max = ip[0];
	for(int i=1; i<sz; i++)
		if(ip[i] > max)
			max = ip[i];

	*pmax = max;
}
*/


// Method 2
void maxValue(int* ip, int sz, int * pmax)
{
	*pmax = ip[0];
	for(int i=1; i<sz; i++)
		if(ip[i] > *pmax)
			*pmax = ip[i];
}

Output : 

Enter no.of values(max. 20) : -8

-8 is invalid input.
Enter valid no.of values(max. 20 only) : 8
        Enter value 1 :  95
        Enter value 2 :  -84
        Enter value 3 :  4
        Enter value 4 :  62
        Enter value 5 :  -38
        Enter value 6 :  72
        Enter value 7 :  859
        Enter value 8 :  384

Minimum value = -84
Maximum value = 859

Press any key to continue

/* Program 13 : Using pointers, finding the minimum and maximum values of the given numbers. Another way */

#include <stdio.h>

void main()
{
	int num[20], sz;
	int min, max;
	char ch='y';

	void enter(int*, int);
	void min_max(int*, int, int*, int*);

	do
	{
		if(ch == 'y')
			printf("\nEnter no.of values(max. 20) : ");
		else
		{
			printf("\n%d is invalid input.", sz);
			printf("\nEnter valid no.of values(max. 20 only) : ");
		}
		
		scanf("%d",&sz);
		if(sz <=0 || sz>20)
			ch = 'n';
	}while(sz<=0 || sz>20);

	enter(num, sz);
	min_max(num, sz, &min,&max);

	printf("\nMinimum value = %d\nMaximum value = %d\n",min, max);
	printf("\n");
}

void enter(int *ip, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("\tEnter value %d :  ",i+1);
		scanf("%d",(ip+i));
		// scanf("%d",&ip[i]);
	}
}
/*
		// Method 1
void min_max(int* ip, int sz, int* pmin, int* pmax)
{
	int min = ip[0];
	int max = ip[0];
	for(int i=1; i<sz; i++)
	{
		if(ip[i] < min)
			min = ip[i];

		if(ip[i] > max)
			max = ip[i];
	}

	*pmin = min;
	*pmax = max;
}

*/
/* Method 2 */
void min_max(int* ip, int sz, int* pmin, int* pmax)
{
	*pmin = ip[0];
	*pmax = ip[0];

	for(int i=1; i<sz; i++)
	{
		if(ip[i] < *pmin)
			*pmin = ip[i];

		if(ip[i] > *pmax)
			*pmax = ip[i];
	}
}

Output :

Enter no.of values(max. 20) : -7

-7 is invalid input.
Enter valid no.of values(max. 20 only) : 7
        Enter value 1 :  58
        Enter value 2 :  67
        Enter value 3 :  15
        Enter value 4 :  95
        Enter value 5 :  75
        Enter value 6 :  39
        Enter value 7 :  57

Minimum value = 15
Maximum value = 95

Press any key to continue

/* Program 14 : Sort the given numbers using pointers */

#include <stdio.h>

void main()
{
	int num[20], sz;
	char ch='y';

	void enter(int*, int);		// function prototype
	void disp(int*, int);
	void sort(int*, int);

	do
	{
		if(ch == 'y')
			printf("\nEnter no.of values to be sorted (max. 20) : ");
		else
		{
			printf("\n%d is invalid input",sz);
			printf("\nEnter the valid no.of numbers to be sorted (max. 20 only) : ");
		}
		scanf("%d",&sz);
		if(sz<=0 || sz>20)
			ch = 'n';
	}while(sz<=0 || sz>20);

	enter(num, sz);
	printf("\nNumbers before sorting\n");
	disp(num, sz);
	printf("\n\nNumbers after sorted\n");
	sort(num, sz);
	disp(num, sz);

	printf("\n\n");
}

void enter(int* ip, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("Enter value %d :  ",i+1);
		scanf("%d",&ip[i]);
		// scanf("%d", (ip+i));
	}
}

void disp(int *ip, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("%d\t",*(ip+i));
		// printf("%d\t",ip[i]);
	}
}

void sort(int *ip, int sz)
{
	int i, j, temp;
	for(i=0; i<sz-1; i++)
		for(j=i+1; j<sz; j++)
			if(ip[i] > ip[j])
			{
				temp  = ip[i];
				ip[i] = ip[j];
				ip[j] = temp;
			}
}

Output :

Enter no.of values to be sorted (max. 20) : 0

0 is invalid input
Enter the valid no.of numbers to be sorted (max. 20 only) : -8

-8 is invalid input
Enter the valid no.of numbers to be sorted (max. 20 only) : 8
Enter value 1 :  65
Enter value 2 :  -59
Enter value 3 :  48
Enter value 4 :  35
Enter value 5 :  -85
Enter value 6 :  75
Enter value 7 :  91
Enter value 8 :  28

Numbers before sorting
65      -59     48      35      -85     75      91      28

Numbers after sorted
-85     -59     28      35      48      65      75      91

Press any key to continue

/* Program 15 : Passing single dimensional string arrays to functions : 
		Handling through pointers */

#include <string.h>
#include <stdio.h>

void main()
{
	char text[80];
	int res;

	int nwords(char*);		// function prototype
	void dispwords(char*);

	printf("\nEnter a line of text\n\t");
	gets(text);
	
	//puts(text);
	res = nwords(text);
	printf("\nNo.of words = %d\n",res);
	printf("\nThe following are the words present in the given text\n\n");
	dispwords(text);

	printf("\n\n");
}

int nwords(char* cp)
{
	int i, nw=1;
	for(i=1; cp[i] != '\0'; i++)
	{
		if(cp[i]== ' ' && cp[i+1]!=' ')
			nw++;
	}
	if(cp[0] == ' ')
		nw--;
	return nw;
}

void dispwords(char* cp)
{
	int i, count=0;
	printf("\t");
	for(i=0; cp[i]!='\0'; i++)
	{
		if(cp[i] != ' ')
		{
			printf("%c",cp[i]);
			count++;
		}
		else if(cp[i+1] != ' ')
		{
			if(count != 0)
				printf("\t%d\n\t",count);
			count = 0;
		}
	}
	if(count !=0)
		printf("\t%d",count);
}

Output :

Enter a line of text
                                 have          a          nice         day

No.of words = 4

The following are the words present in the given text

        have    4
        a       1
        nice    4
        day     3

Press any key to continue


Enter a line of text
        There  is  never  a wrong time to do the right thing.

No.of words = 11

The following are the words present in the given text

        There   5
        is      2
        never   5
        a       1
        wrong   5
        time    4
        to      2
        do      2
        the     3
        right   5
        thing.  6

Press any key to continue

/* Program 16 : Assignment
	Accept a line of text and then do the following operation on the text.
		1. convert the lowercase characters to uppercase and vice-versa
		2. encrypt the text
		3. decrypt the text
*/

#include <stdio.h>
#include <ctype.h>		// isalpha(), isdigit(), tolower(), toupper(), isupper(), islower()
#include <string.h>

void main()
{
	char text[80];
	
	void convert(char*);		// function prototype
	void encrypt(char*);
	void decrypt(char*);
	
	printf("\nEnter a line of text\n\t");
	gets(text);

	convert(text);
	printf("\nAfter conversion...\n\t%s",text);

	// encryting the text
	encrypt(text);
	printf("\nAfter encryption....\n\t%s",text);

	// decrypting the text
	decrypt(text);
	printf("\nAfter decryption....\n\t%s\n",text);

	printf("\n");
}

void convert(char* cp)
{
	for(int i=0; cp[i]!='\0'; i++)
	{
		if(isalpha(cp[i]))
			if(islower(cp[i]))
				cp[i]=toupper(cp[i]);
			else
				cp[i] = tolower(cp[i]);
	}
}

void encrypt(char* cp)
{
	for(int i=0; cp[i]!='\0'; i++)
	{
		if(isalpha(cp[i]))
		{
			if(cp[i] == 'z')
				cp[i] = 'a';
			else if(cp[i] == 'Z')
				cp[i] = 'A';
			else
				cp[i] = cp[i]+1;	// cp[i] += 1;
		}
		else if(isdigit(cp[i]))
		{
			if(cp[i] == '9')
				cp[i]='0';
			else
				cp[i] = cp[i]+1;
		}
	}
}

void decrypt(char* cp)
{
	for(int i=0; cp[i]!='\0'; i++)
	{
		if(isalpha(cp[i]))
		{
			if(cp[i] == 'a')
				cp[i] = 'z';
			else if(cp[i] == 'A')
				cp[i] = 'Z';
			else
				cp[i] = cp[i]-1;	// cp[i] -= 1;
		}
		else if(isdigit(cp[i]))
		{
			if(cp[i] == '0')
				cp[i] = '9';
			else
				cp[i] -= 1;		// cp[i] = cp[i]-1;
		}
	}
}

output :

Enter a line of text
        abc  xyz  pqr  123   789  0567  ABC   XYZ  PQR

After conversion...
        ABC  XYZ  PQR  123   789  0567  abc   xyz  pqr
After encryption....
        BCD  YZA  QRS  234   890  1678  bcd   yza  qrs
After decryption....
        ABC  XYZ  PQR  123   789  0567  abc   xyz  pqr

Press any key to continue

/* Program 17 : Testing string palindromes --- using pointers */

#include <stdio.h>
#include <conio.h>		// getch()
#include <string.h>

void main()
{
	char word[30], op;
	
	char ispalindrome(char*);		// function prototype

	printf("\nEnter a word to test its palindrome nature :  ");
	scanf("%s",word);

	op = ispalindrome(word);
	if(op == 'y')
		printf("\n\t\"%s\" is palindrome", word);
	else
		printf("\n\t\"%s\" is not a palindrome", word);

	printf("\n\n");
}
/*
// Method 1:
char ispalindrome(char* cp)
{
	char temp[30];
	int i, j, sz;
	
	sz = strlen(cp);
	for(i=0,j=sz-1; i<sz; i++,j--)
		temp[i] = cp[j];

	temp[i]='\0';
	if(strcmp(cp, temp) == 0)
		return 'y';
	else
		return 'n';
}
*/

// Method 2:
char ispalindrome(char* cp)
{
	char ch='y';
	int i, j, sz;

	sz = strlen(cp);
	for(i=0, j=sz-1; i<sz/2; i++,j--)
	{
		if(cp[i] != cp[j])
		{
			ch = 'n';
			break;
		}
	}

	return ch;
}

Output :

Enter a word to test its palindrome nature :  malayalam

        "malayalam" is palindrome

Press any key to continue

Enter a word to test its palindrome nature :  sowmya

        "sowmya" is not a palindrome

Press any key to continue

/* Program 18 : Passing two Dimensional Numeric arrays to functions : 
	Handling through pointers */

#include <stdio.h>
void main()
{
	int marks[20][4];
	int sz;
	float avg;
	char ch='y';

	void enter(int* , int);		// function prototype
	void total(int*, int);
	float averageTotal(int*, int);
	void display(int*, int);
	void dispAboveAverage(int*, int, float);
	
	do
	{
		if(ch == 'y')
			printf("\nEnter no.of students(max. 20) : ");
		else
		{
			printf("\n%d is invalid input.",sz);
			printf("\nEnter valid no.of students (in between 1 to 20 only) :  ");
		}
		scanf("%d",&sz);
		if(sz<=0 || sz>20)
			ch='n';
	}while(sz<=0 || sz>20);

	enter(&marks[0][0], sz);	// enter(&marks[0][0], sz);
	total(&marks[0][0], sz);
	display(&marks[0][0], sz);

	avg = averageTotal(&marks[0][0], sz);
	printf("\n\nAverage total = %.3f",avg);
	dispAboveAverage(&marks[0][0], sz, avg);

	printf("\n\n");

}
/*
Formula:
	1. Starting address of each element of a two dimensional array = 
	  (base address + Total no.of columns*row position) + column position.
	2. Starting address of each row of a two dimensional array = 
	    (base address + Total no.of columns*row position).
	3. Contents of each element of a two dimensional array = 
		*((base address + Total no.of columns*row position) + column position).
*/
void enter(int *ip, int sz)
{
	for(int i=0; i<sz; i++)		// controls no.of rows
	{
		printf("\n");
		for(int j=0; j<3; j++)	// controls no.of columns
		{
			printf("Enter marks of student %d in subject %d : ",i+1, j+1);
			scanf("%d",(ip + 4*i+j));
			// scanf("%d",&ip[i][j]);
		}
	}
}

void total(int *ip, int sz)
{
	int total = 0;
	for(int i=0; i<sz; i++)
	{
		total = 0;
		for(int j=0; j<3; j++)
		{
			total += *(ip+4*i+j);
			// total = total + *(ip+4*i+j);
			// total = total + ip[i][j];
		}
		*(ip+4*i+3) = total;
		// ip[i][3] = total;	
	}
}

float averageTotal(int* ip, int sz)
{
	int total =0;
	float avg;

	for(int i=0; i<sz; i++)
	{
		total += *(ip+4*i+3);	// total = total + *(ip+4*i+3);
		// total += ip[i][3];
	}
	avg = (float)total/sz;
	return (avg);
}

void dispAboveAverage(int* ip, int sz, float avg)
{
	printf("\n\nDetails of students marks above average total\n");
	printf("\nsub1    sub2    sub3   total\n");
	for(int i=0; i<sz; i++)	// controls no.of rows
	{
		if(*(ip+4*i+3) > avg)
		{
			printf("\n");
			for(int j=0; j<4; j++)
				printf("%3d\t",*(ip+4*i+j));
		}
	}
}

void display(int *ip, int sz)
{
	printf("\nDetails of students marks \n");
	printf("\nsub1    sub2    sub3   total\n");
	for(int i=0; i<sz; i++)	// controls no.of rows
	{
		printf("\n");
		for(int j=0; j<4; j++)
			printf("%3d\t",*(ip+4*i+j));
	}
}

Output :

Enter no.of students(max. 20) : 0

0 is invalid input.
Enter valid no.of students (in between 1 to 20 only) :  -6

-6 is invalid input.
Enter valid no.of students (in between 1 to 20 only) :  6

Enter marks of student 1 in subject 1 : 85
Enter marks of student 1 in subject 2 : 78
Enter marks of student 1 in subject 3 : 95

Enter marks of student 2 in subject 1 : 48
Enter marks of student 2 in subject 2 : 68
Enter marks of student 2 in subject 3 : 95

Enter marks of student 3 in subject 1 : 84
Enter marks of student 3 in subject 2 : 83
Enter marks of student 3 in subject 3 : 94

Enter marks of student 4 in subject 1 : 99
Enter marks of student 4 in subject 2 : 87
Enter marks of student 4 in subject 3 : 76

Enter marks of student 5 in subject 1 : 35
Enter marks of student 5 in subject 2 : 59
Enter marks of student 5 in subject 3 : 67

Enter marks of student 6 in subject 1 : 49
Enter marks of student 6 in subject 2 : 75
Enter marks of student 6 in subject 3 : 84

Details of students marks

sub1    sub2    sub3   total

 85      78      95     258
 48      68      95     211
 84      83      94     261
 99      87      76     262
 35      59      67     161
 49      75      84     208

Average total = 226.833

Details of students marks above average total

sub1    sub2    sub3   total

 85      78      95     258
 84      83      94     261
 99      87      76     262

Press any key to continue

/* Program 19 : Assignment --- Display original and transpose of 2-D matrix.
	2-D Matrix program --- handling through pointers */

#include <stdio.h>

void main()
{
	int matrix[20][20], sz;
	char ch='y';
	
	void enter(int *, int);		// function prototype
	void dispOriginal(int*, int);
	void dispTranspose(int*, int);
	
	do
	{
		if(ch == 'y')
			printf("\nEnter order of the square matrix (max. 20 only) :  ");
		else
		{
			printf("\n%d is invalid input.",sz);
			printf("\nEnter the valid order of the square matrix (max. 20) : ");
		}
		scanf("%d",&sz);
		if(sz <=0 || sz > 20)
			ch='n';
	}while(sz<=0 || sz>20);

	enter(&matrix[0][0], sz);		// enter(&matrix[0][0], sz);
	dispOriginal(&matrix[0][0], sz);
	dispTranspose(&matrix[0][0], sz);

	printf("\n\n");
}

/*
Formula:
	1. Starting address of each element of a two dimensional array = 
	  (base address + Total no.of columns*row position) + column position.
	2. Starting address of each row of a two dimensional array = 
	    (base address + Total no.of columns*row position).
	3. Contents of each element of a two dimensional array = 
		*((base address + Total no.of columns*row position) + column position).
*/

void enter(int* ip, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("\n");
		for(int j=0; j<sz; j++)
		{
			printf("Enter row %d , column %d value :  ",i+1, j+1);
			scanf("%d",((ip+20*i)+j));
		}
	}
}

void dispOriginal(int *ip, int sz)
{
	printf("\n\tThe Original Matrix\n");
	for(int i=0; i<sz; i++)
	{
		printf("\n\t");
		for(int j=0; j<sz; j++)
			printf("%3d\t",*((ip+20*i)+j));
	}
}

void dispTranspose(int *ip, int sz)
{
	printf("\n\n\tThe Transpose Matrix\n");
	for(int i=0; i<sz; i++)
	{
		printf("\n\t");
		for(int j=0; j<sz; j++)
			printf("%3d\t",*((ip+20*j)+i));
	}
}

Output :

Enter order of the square matrix (max. 20 only) :  0

0 is invalid input.
Enter the valid order of the square matrix (max. 20) : -4

-4 is invalid input.
Enter the valid order of the square matrix (max. 20) : 4

Enter row 1 , column 1 value :  10
Enter row 1 , column 2 value :  20
Enter row 1 , column 3 value :  30
Enter row 1 , column 4 value :  40

Enter row 2 , column 1 value :  50
Enter row 2 , column 2 value :  60
Enter row 2 , column 3 value :  70
Enter row 2 , column 4 value :  80

Enter row 3 , column 1 value :  90
Enter row 3 , column 2 value :  100
Enter row 3 , column 3 value :  110
Enter row 3 , column 4 value :  120

Enter row 4 , column 1 value :  130
Enter row 4 , column 2 value :  140
Enter row 4 , column 3 value :  150
Enter row 4 , column 4 value :  160

        The Original Matrix

         10      20      30      40
         50      60      70      80
         90     100     110     120
        130     140     150     160

        The Transpose Matrix

         10      50      90     130
         20      60     100     140
         30      70     110     150
         40      80     120     160

Press any key to continue

/* Program 20 : Passing 2-D string arrays to functions : Handling through pointers
	perform the following operations :
		1. Accept n no.of words.
		2. Display the words.
		3. Sort the words.
		4. Sort the words with lengthwise order.
*/

#include <stdio.h>
#include <conio.h>		// getch()
#include <string.h>

void main()
{
	char words[20][30], ch='y';
	int sz;

	void enter(char*, int);		// function prototype
	void disp(char*, int);
	void sort(char*, int);
	void sortlength(char*, int);

	do
	{
		if(ch == 'y')
			printf("\nEnter the no.of words (max. 20) : ");
		else
		{
			printf("\n%d is invalid input.",sz);
			printf("\nEnter the valid no.of words (between 1 to 20 only):  ");
		}
		scanf("%d",&sz);
		
		if(sz<=0 || sz>20)
			ch='n';
	}while(sz<=0 || sz>20);

	enter(&words[0][0], sz);
	printf("\n\nThe following are the entered words : \n");
	disp(&words[0][0], sz);
	getch();
	
	sort(&words[0][0], sz);
	printf("\n\nThe following are the words after sorting : \n");
	disp(&words[0][0], sz);

	sortlength(&words[0][0], sz);
	printf("\n\nThe following are the words after sorting lengthwise order : \n");
	disp(&words[0][0], sz);

	printf("\n\n");
}

void enter(char* cp, int  sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("\tEnter word %d : ",i+1);
		scanf("%s", (cp + 30*i));
	}
}

void disp(char* cp, int sz)
{
	for(int i=0; i<sz; i++)
		printf("\n\t%s",(cp+30*i));
}

void sort(char* cp, int sz)
{
	char temp[30];
	for(int i=0; i<sz-1; i++)
		for(int j=i+1; j<sz; j++)
			if(strcmp((cp+30*i), (cp+30*j)) > 0)
			{
				strcpy(temp, (cp+30*i));
				strcpy((cp+30*i), (cp+30*j));
				strcpy((cp+30*j), temp);
			}
}

void sortlength(char* cp, int sz)
{
	char temp[30];
	for(int i=0; i<sz-1; i++)
		for(int j=i+1; j<sz; j++)
			if(strlen((cp+30*i)) > strlen(cp+30*j))
			{
				strcpy(temp, (cp+30*i));
				strcpy((cp+30*i), (cp+30*j));
				strcpy((cp+30*j), temp);
			}

}Output :
Enter the no.of words (max. 20) : -5

-5 is invalid input.
Enter the valid no.of words (between 1 to 20 only):  5

        Enter word 1 : palanikumar
        Enter word 2 : aravind
        Enter word 3 : somu
        Enter word 4 : anand
        Enter word 5 : venkataramana


The following are the entered words :

        palanikumar
        aravind
        somu
        anand
        venkataramana

The following are the words after sorting :

        anand
        aravind
        palanikumar
        somu
        venkataramana

The following are the words after sorting lengthwise order :

        somu
        anand
        aravind
        palanikumar
        venkataramana

Press any key to continue

/* Program 21 : Passing 2-D string arrays to functions : Handling through pointers
	perform the following operations :
		1. Accept n no.of lines
		2. Display the no.of words present.
		3. Display the words present in each line.
*/

#include <stdio.h>

void main()
{
	char text[20][80], ch='y';
	int sz, res;

	void enter(char*, int);		// function prototype
	void dispwords(char*, int);
	int nwords(char*, int);

	do
	{
		if(ch == 'y')
			printf("\nEnter the no.of lines of text to be entered (max. 20 only) : ");
		else
		{
			printf("\n%d is invalid input.",sz);
			printf("\nEnter the valid no.of lines (between 1 to 20 only) : ");
		}
		scanf("%d", &sz);
		if(sz<=0 || sz>20)
			ch='n';
	}while(sz<=0 || sz>20);

	enter(&text[0][0], sz);
	printf("\nThe following are the words present in the given lines of text\n\t");
	dispwords(&text[0][0], sz);

	res = nwords(&text[0][0], sz);
	printf("\n\nTotal no.of words present =  %d\n",res);

	printf("\n");
}

void enter(char* cp, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("Enter line %d text :  ",i+1);
		fflush(stdin);
		gets((cp+80*i));
	}
}

void dispwords(char* cp, int sz)
{
	int count;
	for(int i=0; i<sz; i++)
	{
		printf("\n\n\t");
		count = 0;
		for(int j=0; *((cp+80*i)+j)!='\0'; j++)
		{
			if(*((cp+80*i)+j) != ' ')
			{
				printf("%c",*((cp+80*i)+j));
				count++;
			}
			else if(*((cp+80*i)+j+1) != ' ')
			{
				if(count != 0)
					printf("\t%d",count);
				count=0;
				printf("\n\t");
			}
		}
		if(count != 0)
			printf("\t%d",count);
	}
}

int nwords(char *cp, int sz)
{
	int total=0, nw;
	int i, j;

	for(i=0; i<sz; i++)
	{
		nw=1;
		for(j=0; *(cp+80*i+j)!='\0'; j++)
		{
			if(*(cp+80*i+j) == ' ' && *(cp+80*i+j+1) != ' ')
				nw++;
		}
		if(*(cp+80*i+0) == ' ')
			nw--;
		total += nw;	// total = total + nw;
	}
	return(total);
}

Output :

Enter the no.of lines of text to be entered (max. 20 only) : 0

0 is invalid input.
Enter the valid no.of lines (between 1 to 20 only) : -5

-5 is invalid input.
Enter the valid no.of lines (between 1 to 20 only) : 25

25 is invalid input.
Enter the valid no.of lines (between 1 to 20 only) : 5
Enter line 1 text :  One work  at a time
Enter line 2 text :    Have  a  nice day palanikumar
Enter line 3 text :  There is never  a wrong time to do the right thing.
Enter line 4 text :  Develop novelist attitude
Enter line 5 text :   Be yourself.

The following are the words present in the given lines of text


        One     3
        work    4
        at      2
        a       1
        time    4


        Have    4
        a       1
        nice    4
        day     3
        palanikumar     11

        There   5
        is      2
        never   5
        a       1
        wrong   5
        time    4
        to      2
        do      2
        the     3
        right   5
        thing.  6

        Develop 7
        novelist        8
        attitude        8


        Be      2
        yourself.       9


Total no.of words present =  27

Press any key to continue

/* Program 22 : Assignment 
	Eacb word of line of text to be copied into each row of 2-D array */

#include <stdio.h>

int j=0;	// global variable to store the no.of rows of a 2-D string array
void main()
{
	char text[80];
	char words[20][30];

	void copy(char* line, char* cp);
	void disp(char*);

	printf("\nEnter a line of text :  ");
	gets(text);

	copy(text, &words[0][0]);
	disp(&words[0][0]);

	printf("\n\n");
}

void copy(char* cp1, char* cp2)
{
	int i;
	int k=0;	// column position

	for(i=0; *(cp1+i)!='\0'; i++)	// for(i=0; cp1[i]!='\0'; i++)
	{
		if(*(cp1+i) != ' ')
		{
			*(cp2+30*j+k) = cp1[i]; // cp1[i] = *(cp1+i);
			k++;
		}
		else if(*(cp1+i+1) != ' ')
		{
			*(cp2+30*j+k) = '\0';
			j++;	// row increment
			k=0;	// column initializing to 0
		}
	}
	*(cp2+30*j+k) = '\0';
}

void disp(char* cp)
{
	for(int i=0; i<=j; i++)
		printf("\n\t%s",(cp+30*i));
}

Output :

Enter a line of text :  There is never  a wrong  time to do the right thing.

        There
        is
        never
        a
        wrong
        time
        to
        do
        the
        right
        thing.

Press any key to continue

/* Program 23 : Pointer to Pointer variables :
	Pointer to Pointer variables are the pointer variables which can hold the starting
address of a pointer variable. 
	Declaration :
		datatype ** variable(s);
*/

#include <stdio.h>
void main()
{
	int num=5;
	int* ip;
	int **pp;
	// int num=5, *ip, **pp;

	ip = &num;
	pp = &ip;

	printf("\nAddress of num = %u",&num);
	printf("\nContents of ip = %u\n", ip);

	printf("\nAddress of ip  = %u",&ip);
	printf("\nContents of pp = %u\n",pp);

	printf("\nAddress of pp = %u",&pp);

	printf("\nnum = %d \t *ip = %d \t **pp = %d\n",num, *ip, **pp);

}
OUtput :

Address of num = 1244884
Contents of ip = 1244884

Address of ip  = 1244872
Contents of pp = 1244872

Address of pp = 1244860
num = 5          *ip = 5         **pp = 5
Press any key to continue

/* Program 24 : Pointer to pointer to Pointer variable.
		Declaration:
			datatype ***variable(s);
Note: Whenever we have indirection symbols(more than once) before pointer variable, we have to read properly from right to left.
***p = (*(*(*p)))
*/

#include <stdio.h>
void main()
{
	int num=5;
	int *ip, **pp, ***ppp;

	ip = &num;
	pp = &ip;
	ppp = &pp;

	printf("\nAddress of num = %u",&num);
	printf("\nAddress of ip = %u",&ip);
	printf("\nAddress of pp = %u",&pp);
	printf("\nAddress of ppp = %u",&ppp);

	printf("\nContents of num = %u",num);
	printf("\nContents of ip = %u",ip);
	printf("\nContents of pp = %u",pp);
	printf("\nContents of ppp = %u",ppp);

	printf("\nnum = %d",*ip);
	printf("\nnum = %d",**pp);
	printf("\nnum = %d",***ppp);

	printf("\n\n");

}
Output :

Address of num = 1244884
Address of ip = 1244872
Address of pp = 1244860
Address of ppp = 1244848
Contents of num = 5
Contents of ip = 1244884
Contents of pp = 1244872
Contents of ppp = 1244860
num = 5
num = 5
num = 5

Press any key to continue

/* Program 25 : Pointer to Pointer arithmetic */
#include <stdio.h>
void main()
{
	int x, y, z;
	int *ip1, *ip2, *ip3;
	int **pp1, **pp2, **pp3;

	ip1 = &x;
	ip2 = &y;
	ip3 = &z;

	pp1 = &ip1;
	pp2 = &ip2;
	pp3 = &ip3;

	**pp1 = 10;		// x=10;
	**pp2 = **pp1 + 10;		// y = x+10 = 10+10 = 20;
	**pp3 = **pp1 + **pp2;	// z = x+y = 10+20 = 30;

	printf("\nx=%d\ty=%d\tz=%d",x, y, z);

	**pp1 = **pp3/(**pp2) + 2;	// x=z/y+2 = 30/20 + 2 = 1+2 =3;
	pp3 = &ip2;		// **pp3 = y;
	**pp2 = *ip1 + **pp1 + **pp2;	// y = x+x+y = 3+3+20 = 26;
	**pp1 = **pp2-**pp3;	// x = y-y=0;
	**pp3 = **pp2+**pp1+**pp3;	// y = y+x+y = 26+0+26 = 52;
	
	printf("\nx=%d\ty=%d\tz=%d\n\n",x, y, z);
}
Output :

x=10    y=20    z=30
x=0     y=52    z=30

Press any key to continue

/* Program 26 : Array of Pointers.
	An array which can hold addresses of same type of variables are called as Array of Pointers. 
    Syntax:
	datatype *arrayname[ne]; ne->no.of elements(integer constant).
*/

#include <stdio.h>
void main()
{
	int x, y, z, i;
	int *aop[3];	// array of pointers

	aop[0] = &x;
	aop[1] = &y;
	aop[2] = &z;

	printf("\nAddress of x = %u",&x);
	printf("\nAddress of y = %u",&y);
	printf("\nAddress of z = %u",&z);

	printf("\nContents of aop[0] = %u",aop[0]);
	printf("\nContents of aop[1] = %u",aop[1]);
	printf("\nContents of aop[2] = %u",aop[2]);

	printf("\n\n");
	for(i=0; i<3; i++)
	{
		printf("Enter value %d : ", i+1);
		scanf("%d",aop[i]);
	}

	printf("\nContents of x, y, z .....\n");
	for(i=0; i<3; i++)
		printf("\n*aop[%d] = %d",i,*aop[i]);

	printf("\nAddresses of aop[0], aop[1], aop[2]\n");
	for(i=0; i<3; i++)
		printf("\n&aop[%d] = %u",i, &aop[i]);

	printf("\n\n");
}
Output :

Address of x = 1244884
Address of y = 1244872
Address of z = 1244860
Contents of aop[0] = 1244884
Contents of aop[1] = 1244872
Contents of aop[2] = 1244860

Enter value 1 : 15
Enter value 2 : 25
Enter value 3 : 35

Contents of x, y, z .....

*aop[0] = 15
*aop[1] = 25
*aop[2] = 35
Addresses of aop[0], aop[1], aop[2]

&aop[0] = 1244828
&aop[1] = 1244832
&aop[2] = 1244836

Press any key to continue

/* Program 27 : Manipulating single dimensional numeric arrays through array of pointers */
#include <stdio.h>
void main()
{
	int num[20];
	int *aop[20];
	int i, sz, sum=0;
	float avg=0;
	char ch='y';

	for(i=0; i<20; i++)
		aop[i] = &num[i];

	do
	{
		if(ch == 'y')
			printf("\nEnter size of the array (max. 20) :  ");
		else
		{
			printf("\n%d is Invalid input.",sz);
			printf("\nEnter the valid size of the array (between 1 to 20 only) :  ");
		}
		scanf("%d",&sz);
		if(sz <=0 || sz>20)
			ch = 'n';
	}while(sz<=0 || sz>20);

	for(i=0; i<sz; i++)
	{
		printf("Enter value %d :  ",i+1);
		scanf("%d",aop[i]);
		// scanf("%d",&num[i]);
		sum += *aop[i];	// sum = sum+*aop[i]; = sum = sum+num[i];
	}
	avg = (float)sum/sz;
	printf("\nAverage value = %.3f",avg);
	printf("\nValues above average value\n");
	for(i=0; i<sz; i++)
		if(*aop[i] > avg)
			printf("\n%d", *aop[i]);

	printf("\n\n");
}
Output :

Enter size of the array (max. 20) :  0

0 is Invalid input.
Enter the valid size of the array (between 1 to 20 only) :  -7

-7 is Invalid input.
Enter the valid size of the array (between 1 to 20 only) :  25

25 is Invalid input.
Enter the valid size of the array (between 1 to 20 only) :  7
Enter value 1 :  55
Enter value 2 :  36
Enter value 3 :  45
Enter value 4 :  84
Enter value 5 :  75
Enter value 6 :  64
Enter value 7 :  49

Average value = 58.286
Values above average value

84
75
64

Press any key to continue

/* Program 28 : Program using array of pointers. 
	Note: The name of array of pointers has to be received in a 
pointer to pointer variable i.e., when you pass the starting address
of array of pointers, we have to receive in a pointer to pointer variable.
*/

#include <stdio.h>
void main()
{
	int num[20], *aop[20], i, sz;
	float avg;
	char ch='y';

	void enter(int**, int sz);		// function prototype
	float average(int**, int);
	void dispAboveAverage(int**, int, float);

	for(i=0; i<20; i++)
		aop[i] = &num[i];

	do
	{
		if(ch == 'y')
			printf("\nEnter size of the array (max. 20) :  ");
		else
		{
			printf("\n%d is Invalid input.",sz);
			printf("\nEnter the valid size of the array (between 1 to 20 only) :  ");
		}
		scanf("%d",&sz);
		if(sz <=0 || sz>20)
			ch = 'n';
	}while(sz<=0 || sz>20);

	enter(aop, sz);
	avg = average(aop, sz);
	printf("\nAverage value = %.3f",avg);

	printf("\nAbove average values\n");
	dispAboveAverage(aop, sz, avg);

	printf("\n\n");
}

void enter(int **pp, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("Enter value %d :  ",i+1);
		scanf("%d",pp[i]);
		// scanf("%d",*(pp+i));
	}
}

float average(int **pp, int sz)
{
	float avg;
	int sum=0;
	for(int i=0; i<sz; i++)
		sum += *pp[i];	// sum = sum + *pp[i];
	// sum = sum + *(*(pp+i));

	avg = (float)sum/sz;
	return avg;
}

void dispAboveAverage(int **pp, int sz, float avg)
{
	for(int i=0; i<sz; i++)
		if(*pp[i] > avg)	// if(**(pp+i) > avg)
			printf("\n%d",*pp[i]);
}
Output :

Enter size of the array (max. 20) :  -5

-5 is Invalid input.
Enter the valid size of the array (between 1 to 20 only) :  5
Enter value 1 :  15
Enter value 2 :  23
Enter value 3 :  52
Enter value 4 :  42
Enter value 5 :  36

Average value = 33.600
Above average values

52
42
36

Press any key to continue

/* Program 29 : Sort the numbers using array of pointers */

#include <stdio.h>
void main()
{
	int num[20];
	int *aop[20];
	int i, sz;
	char ch='y';

	void enter(int**, int);		// function prototype
	void disp(int**, int);
	void Sort(int**, int);

	for(i=0; i<20; i++)
		aop[i] = &num[i];

	do
	{
		if(ch == 'y')
			printf("\nEnter size of the array (max. 20) :  ");
		else
		{
			printf("\n%d is Invalid input.",sz);
			printf("\nEnter the valid size of the array (between 1 to 20 only) :  ");
		}
		scanf("%d",&sz);
		if(sz <=0 || sz>20)
			ch = 'n';
	}while(sz<=0 || sz>20);

	enter(aop, sz);
	printf("\nNumbers before sorting.....\n");
	disp(aop, sz);
	printf("\nNumbers after sorting.....\n");
	Sort(aop, sz);
	disp(aop, sz);
	printf("\n\n");
}

void enter(int **pp, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("Enter value %d :  ",i+1);
		scanf("%d",pp[i]);
		// scanf("%d",*(pp+i));
	}
}

void disp(int **pp, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("\n\t%d",*pp[i]);
		// printf("\n\t%d",**(pp+i));
	}
}
/*
// Sorting by pointers
void Sort(int **pp, int sz)
{
	int *temp;
	for(int i=0; i<sz-1; i++)
		for(int j=i+1; j<sz; j++)
			if(*pp[i] > *pp[j])
			{
				temp = pp[i];
				pp[i] = pp[j];
				pp[j] = temp;
			}
}*/

// sorting by contents
void Sort(int **pp, int sz)
{
	int temp;
	for(int i=0; i<sz-1; i++)
		for(int j=i+1; j<sz; j++)
			if(*pp[i] > *pp[j])
			{
				temp = *pp[i];
				*pp[i] = *pp[j];
				*pp[j] = temp;
			}
}
Output :

Enter size of the array (max. 20) :  -5

-5 is Invalid input.
Enter the valid size of the array (between 1 to 20 only) :  5
Enter value 1 :  40
Enter value 2 :  50
Enter value 3 :  10
Enter value 4 :  30
Enter value 5 :  20

Numbers before sorting.....

        40
        50
        10
        30
        20
Numbers after sorting.....

        10
        20
        30
        40
        50

Press any key to continue

/* Program 30 : Sorting by pointers.
	In this method, instead of swapping the contents of array, the addresses in the array of pointers are swapped. Rearranging the addresses in an array of pointers by comparing the contents of array is called as Sorting by Pointers.
*/

#include <stdio.h>
void main()
{
	int num[20], *aop[20], i , sz;
	char ch='y';

	void enter(int**, int);		// function prototype
	void disp(int*, int**, int, char);
	void Sort(int**, int);

	for(i=0; i<20; i++)
		aop[i] = &num[i];

	do
	{
		if(ch == 'y')
			printf("\nEnter size of the array (max. 20) :  ",i+1);
		else
		{
			printf("\n%d is Invalid Input.",sz);
			printf("\nEnter the valid size of the array (between 1 to 20 only) :  ");
		}
		scanf("%d",&sz);

		if(sz<=0 || sz>20)
			ch='n';
	}while(sz<=0 || sz>20);

	enter(aop, sz);
	Sort(aop, sz);		// sorting by pointers
	for(i=0; i<3; i++)
	{
		printf("\nDisplay (o)riginal or (s)orted list of values :  ");
		fflush(stdin);
		ch = getchar();
		disp(num, aop, sz, ch);
	}
	printf("\n\n");
}

void enter(int **pp, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("\tEnter value %d :  ",i+1);
		scanf("%d",*(pp+i));
		// scanf("%d",pp[i]);
	}
}

void disp(int *num, int **pp, int sz, char ch)
{
	switch(ch)
	{
	case 'o':
		for(int i=0; i<sz; i++)
			printf("\n\t%d",num[i]);
		break;
	case 's':
		for(int i=0; i<sz; i++)
			printf("\n\t%d",*pp[i]);
		break;
	default:
		printf("\nInvalid Choice\n");
		break;
	}
}

void Sort(int **pp, int sz)	// sorting by pointers
{
	int *temp;
	for(int i=0; i<sz-1; i++)
		for(int j=i+1; j<sz; j++)
			if(*pp[i] > *pp[j])
			{
				temp = pp[i];
				pp[i] = pp[j];
				pp[j] = temp;
			}
}

Output :

Enter size of the array (max. 20) :  -6

-6 is Invalid Input.
Enter the valid size of the array (between 1 to 20 only) :  25

25 is Invalid Input.
Enter the valid size of the array (between 1 to 20 only) :  0

0 is Invalid Input.
Enter the valid size of the array (between 1 to 20 only) :  6
        Enter value 1 :  50
        Enter value 2 :  40
        Enter value 3 :  60
        Enter value 4 :  10
        Enter value 5 :  30
        Enter value 6 :  20

Display (o)riginal or (s)orted list of values :  o

        50
        40
        60
        10
        30
        20
Display (o)riginal or (s)orted list of values :  p

Invalid Choice

Display (o)riginal or (s)orted list of values :  s

        10
        20
        30
        40
        50
        60

Press any key to continue

/* Program 31 : Assignment
  Using array of pointers, accept n numbers and display the minimum and maximum values */

#include <stdio.h>
void main()
{
	int num[20], *aop[20], i, sz;
	int min, max;
	char ch = 'y';

	void enter(int **pp, int sz);		// function prototype
	void min_max(int **pp, int sz, int *pmin, int *pmax);

	for(i=0; i<20; i++)
	aop[i] = &num[i];

	do
	{
		if(ch == 'y')
			printf("\nEnter size of the array (max. 20) :  ",i+1);
		else
		{
			printf("\n%d is Invalid Input.",sz);
			printf("\nEnter the valid size of the array (between 1 to 20 only) :  ");
		}
		scanf("%d",&sz);

		if(sz<=0 || sz>20)
			ch='n';
	}while(sz<=0 || sz>20);

	enter(aop, sz);
	min_max(aop, sz, &min, &max);

	printf("\nMinimum Value = %d\nMaximum Value = %d\n\n",min,max);

}

void enter(int **pp, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("\tEnter value %d :  ",i+1);
		scanf("%d",*(pp+i));
		// scanf("%d",pp[i]);
	}
}

void min_max(int **pp, int sz, int *pmin, int *pmax)
{
	*pmin = *pp[0];
	*pmax = *pp[0];
	for(int i=1; i<sz; i++)
	{
		if(*pp[i] < *pmin)
			*pmin = *pp[i];
		if(*pp[i] > *pmax)
			*pmax = *pp[i];
	}
}
Output :

Enter size of the array (max. 20) :  21

21 is Invalid Input.
Enter the valid size of the array (between 1 to 20 only) :  -6

-6 is Invalid Input.
Enter the valid size of the array (between 1 to 20 only) :  6
        Enter value 1 :  52
        Enter value 2 :  -45
        Enter value 3 :  15
        Enter value 4 :  378
        Enter value 5 :  652
        Enter value 6 :  15

Minimum Value = -45
Maximum Value = 652

Press any key to continue

/* Program 32 : Functions returning pointers.
	Functions returning pointers should return the address of variables declaredin the calling function but not addresses of the variables declared in the called functions because when the control goes back to the calling function, all the variables declared in the called function will die.
*/

/*
// wrong
#include <stdio.h>
void main()
{
	int *ip;
	int* modify();		// function prototype

	ip = modify();
	printf("\n%d\n\n", *ip);
}

int* modify()
{
	int num=200;
	return &num;

}
*/
// right
#include <stdio.h>
void main()
{
	int num = 10, *ip;
	int* modify(int*);		// function prototype

	ip = modify(&num);
	printf("\n%d\n\n", *ip);
}

int* modify(int *ip)
{
	*ip = *ip+10;
	return ip;

}

Output : 
20
Press any key to continue

/* Program 33 : Using functions returning pointers, Find the minimum and maximum value of the given numbers. */

#include <stdio.h>
void main()
{
	int num[20], sz;
	int *pmin , *pmax;
	char ch='y';

	void enter(int*, int);		// function prototype
	int* minValue(int*, int);
	int* maxValue(int*, int);

	do
	{
		if(ch == 'y')
			printf("\nEnter size of the array (max. 20) :  ");
		else
		{
			printf("\n%d is Invalid Input",sz);
			printf("\nEnter the valid size of the array (between 1 to 20 only) :  ");
		}
		scanf("%d",&sz);
		if(sz<=0 || sz>20)
			ch='n';
	}while(sz<=0 || sz>20);

	enter(num, sz);
	pmin = minValue(num, sz);
	pmax = maxValue(num, sz);

	printf("\nMinimum value = %d\nMaximum value = %d\n\n",*pmin, *pmax);
}

void enter(int* ip, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("Enter value %d :  ",i+1);
		scanf("%d",(ip+i));
	}
}

// Method 1 for finding minimum value
int* minValue(int *ip, int sz)
{
	int i, min;
	min = ip[0];	// min = *(ip+0);
	for(i=0; i<sz; i++)
	{
		if(ip[i] < min)
			min = ip[i];
	}
	for(i=0; i<sz; i++)
	{
		if(ip[i] == min)
			break;
	}
	return (ip+i);
}
/*
// Method 2 for finding the minimum value
int* minValue(int *ip, int sz)
{
	int i, min, *pmin;
	min = ip[0];
	pmin = ip;
	for(i=1; i<sz; i++)
	{
		if(ip[i] < min)
		{
			min = ip[i];
			pmin = (ip+i);
		}
	}
	return pmin;
}

*/

/*
// Method 1 for finding maximum value
int* maxValue(int *ip, int sz)
{
	int i, max;
	max = ip[0];	// min = *(ip+0);
	for(i=0; i<sz; i++)
	{
		if(ip[i] > max)
			max = ip[i];
	}
	for(i=0; i<sz; i++)
	{
		if(ip[i] == max)
			break;
	}
	return (ip+i);
}
*/
// Method 2 for finding the maximum value
int* maxValue(int *ip, int sz)
{
	int i, max, *pmax;
	max = ip[0];
	pmax = ip;
	for(i=1; i<sz; i++)
	{
		if(ip[i] > max)
		{
			max = ip[i];
			pmax = (ip+i);
		}
	}
	return pmax;
}
Output :

Enter size of the array (max. 20) :  0

0 is Invalid Input
Enter the valid size of the array (between 1 to 20 only) :  21

21 is Invalid Input
Enter the valid size of the array (between 1 to 20 only) :  -7

-7 is Invalid Input
Enter the valid size of the array (between 1 to 20 only) :  7
Enter value 1 :  95
Enter value 2 :  25
Enter value 3 :  -45
Enter value 4 :  36
Enter value 5 :  458
Enter value 6 :  25
Enter value 7 :  67

Minimum value = -45
Maximum value = 458

Press any key to continue

/* program 34 : Using functions returning Pointers, Accept n no.of words from user and display the words which has min. no.of characters as well as max. no.of characters. Also display the alphabetically largest word. */

#include <stdio.h>
#include <string.h>

void main()
{
	char word[20][30], ch='y';
	int i, sz;
	char *cmin, *cmax, *large;

	void enter(char*, int);		// function prototype
	char* minlength(char*, int);
	char* maxlength(char*, int);
	char* maxword(char*, int);

	do
	{
		if(ch == 'y')
			printf("\nEnter no.of words (max. 20) :  ");
		else
		{
			printf("\n%d is Invalid Input",sz);
			printf("\nEnter the valid no.of words (between 1 to 20 only) :  ");
		}
		scanf("%d",&sz);
		if(sz<=0 || sz>20)
			ch ='n';
	}while(sz<=0 || sz>20);

	enter(&word[0][0], sz);
	//enter(&word[0][0], sz);

	cmin = minlength(&word[0][0], sz);
	printf("\nWord with minimum no.of characters = %s",cmin);

	cmax = maxlength(&word[0][0], sz);
	printf("\nWord with maximum no.of characters = %s\n", cmax);

	large = maxword(&word[0][0], sz);
	printf("\nAlphabetically largest word = %s\n", large);

	printf("\n");
}

/*
	Formulae:
	1. Starting address of each row in a two dimensional array = 
		base address + total no.of columns * row position.
	2. Address of each element in a two dimensional arary = 
		base address + total no.of columns* row position + column position.
	3. Contents of each element in a two dimensional array = 
		*(base address + (total no.of columns * row position) + column position;
*/

void enter(char *cp, int sz)
{
	int i;
	printf("\n");
	for(i=0; i<sz; i++)
	{
		printf("Enter word %d :  ",i+1);
		scanf("%s", (cp+30*i));
	}
}

char* minlength(char *cp, int sz)
{
	int i, min;
	char *pmin;
	
	min = strlen(cp+0);
	pmin = (cp+0);

	for(i=1; i<sz; i++)
	{
		if(strlen(cp+30*i) < min)
		{
			min = strlen(cp+30*i);
			pmin = (cp+30*i);
		}
	}
	return pmin;
}

char* maxlength(char *cp, int sz)
{
	int i, max;
	char *pmax;
	
	max = strlen(cp+0);
	pmax = (cp+0);

	for(i=1; i<sz; i++)
	{
		if(strlen(cp+30*i) > max)
		{
			max = strlen(cp+30*i);
			pmax = (cp+30*i);
		}
	}
	return pmax;
}

// finding alphabetically largest word
char* maxword(char *cp, int sz)
{
	int i, max;
	char *pmax, temp[30];

	strcpy(temp, (cp+0));
	pmax = cp;

	for(i=1; i<sz; i++)
	{
		if(strcmp((cp+30*i), temp) > 0)
		{
			strcpy(temp, (cp+30*i));
			pmax = cp+30*i;
		}
	}
	return pmax;
}
Output :

Enter no.of words (max. 20) :  -7

-7 is Invalid Input
Enter the valid no.of words (between 1 to 20 only) :  7

Enter word 1 :  Monitor
Enter word 2 :  CentralProcessingUnit
Enter word 3 :  keyBoard
Enter word 4 :  mercuryMotherBoard
Enter word 5 :  ZeeTelevision
Enter word 6 :  Zoo
Enter word 7 :  tiger

Word with minimum no.of characters = Zoo
Word with maximum no.of characters = CentralProcessingUnit

Alphabetically largest word = tiger

Press any key to continue

/* Program 35 : Array of Pointers and Strings.
		An array which can hold starting addresses are called as Array of Pointers. */

#include <stdio.h>

void main()
{
	char *aop[4] = 
	{
		"welcome",
		"unix",
		"c",
		"hello"
	};
// Array of pointers *aop[4] will point to some addresses which are not contiguously
//	allocated.  Memories for strings are not allocated contiguously but allocates
//	memory for them anywhere and their starting addresses is stored in array of pointers.

	int i;
	for(i=0; i<4; i++)
		printf("\n\t%s\t\t%u\t\t%u",aop[i],aop[i],&aop[i]);
	
	printf("\n\n");

}

/*
// wrong
void main()
{
	char *aop[4];
	int i;
	printf("\nEnter 4 words\n");
	for(i=0; i<4; i++)
		scanf("%s",aop[i]);
	for(i=0; i<4; i++)
		printf("\n%s",aop[i]);
	printf("\n\n");
}
*/
Output :

        welcome         4341828         1244872
        unix            4341820         1244876
        c               4341816         1244880
        hello           4341808         1244884

Press any key to continue

/* Program 36 : Pointers to Functions.
	Pointers to Functions are the pointer variables which can hold the starting address of functions. Similarly Pointers to arrays are the pointer variables which can hold the starting address of arrays.
	Purpose of pointers to functions :
		To call the functions through their addresses (i.e., through pointers).
	The name of the function itself is its starting address. Similarly, the name of the array itself is its starting address.
*/

#include <stdio.h>
void main()
{
	void disp();		// function prototype
	
	printf("\nStarting address of main() = %u",main);
	printf("\nStarting address of disp() = %u", disp);
	disp();

	printf("\n\n");

}

void disp()
{
	printf("\nHave a nice day");
}
Output :

Starting address of main() = 4264886
Starting address of disp() = 4264331
Have a nice day

Press any key to continue

/* Program 37 : Pointers to functions Declaration
  Syntax :
     datatype  (*variable)();
	datatype indicates the type of value, the function returns.
eg1. int (*ptf)();
	Read as ptf is a pointer variable which can hold the starting address of a function that returns an integer value.
eg2.	void (*ptf)();
	Read as ptf is a pointer variable which can hold the starting address of a function that returns void.
eg3.	int* ptf();
  Read as ptf() is a function prototype which returns an integer pointer.
*/

#include <stdio.h>
void main()
{
	void disp();	// function prototype
	
	void (*ptf)();	// function pointer variable
	ptf = disp;
	printf("\nContents of ptf = %u", ptf);
	printf("\nStarting address of disp() = %u", disp);

	(*ptf)();
	disp();
	ptf();	// ptf() = (*ptf)();

	printf("\n\n");
}

void disp()
{
	printf("\nHave a nice day");
}
	
Output :

Contents of ptf = 4264331
Starting address of disp() = 4264331
Have a nice day
Have a nice day

Press any key to continue

/* Program 38 : Using function pointers, Find the average of two numbers */

#include <stdio.h>
void main()
{
	int x, y;
	float avg;

//	float average(int, int);	// function prototype
	float __stdcall average(int, int);	// function prototype

//	float (__cdecl *ptf)(int,int);
	float (__stdcall *ptf)(int,int);

	printf("\nEnter the two integer values\n");
	scanf("%d%d",&x, &y);

	ptf = average;

	printf("\nStarting address of average() = %u\n",average);
	printf("Contents of pointer variable, ptf = %u",ptf);

	avg = (*ptf)(x,y);	// avg = average(x, y);
	printf("\nAverage value = %.3f\n\n",avg);

}

float __stdcall average(int x, int y)
{
	return (float)(x+y)/2.0;
}

Output :

Enter the two integer values
7
6

Starting address of average() = 4265586
Contents of pointer variable, ptf = 4265586
Average value = 6.500

Press any key to continue

/* Program 39 : Using function pointers, perform add(), sub, mul() of two numbers */

#include <stdio.h>
void main()
{
	int x, y, res;

	int add(int, int);		// function prototype
	int sub(int, int);
	int mul(int, int);

	int (*ptf1)(int, int);	// function pointer declaration
	int (*ptf2)(int, int);
	int (*ptf3)(int, int);

	ptf1 = add;
	ptf2 = sub;
	ptf3 = mul;

	printf("\nStarting address of add() = %u", add);
	printf("\nContent of pointer variable, ptf1 = %u\n", ptf1);

	printf("\nStarting address of sub() = %u", sub);
	printf("\nContent of pointer variable, ptf2 = %u\n", ptf2);

	printf("\nStarting address of mul() = %u", mul);
	printf("\nContent of pointer variable, ptf3 = %u\n", ptf3);

	printf("\nEnter two integer values : \n");
	scanf("%d%d",&x, &y);

	printf("\nAddition       : %d\t\t%d\t\t%d",(*ptf1)(x,y), ptf1(x,y),add(x,y));
	printf("\nSubtraction    : %d\t\t%d\t\t%d",(*ptf2)(x,y), ptf2(x,y), sub(x,y));
	printf("\nMultiplication : %d\t\t%d\t\t%d",(*ptf3)(x,y), ptf3(x,y), mul(x,y));

	printf("\n\n");
}

int add(int x, int y)
{
	return x+y;
}

int sub(int x, int y)
{
	return x-y;
}

int mul(int x, int y)
{
	return x*y;
}
Output :

Starting address of add() = 4264436
Content of pointer variable, ptf1 = 4264436

Starting address of sub() = 4265111
Content of pointer variable, ptf2 = 4265111

Starting address of mul() = 4265071
Content of pointer variable, ptf3 = 4265071

Enter two integer values :
10
2

Addition       : 12             12              12
Subtraction    : 8              8               8
Multiplication : 20             20              20


Starting address of add() = 4264436
Content of pointer variable, ptf1 = 4264436

Starting address of sub() = 4265111
Content of pointer variable, ptf2 = 4265111

Starting address of mul() = 4265071
Content of pointer variable, ptf3 = 4265071

Enter two integer values :
-5
-12

Addition       : -17            -17             -17
Subtraction    : 7              7               7
Multiplication : 60             60              60

Press any key to continue


/* Program 40 : Array of Pointers to functions.
		An array which can hold the starting addresses of functions that returns the
same type of value are called as Array of Pointers to functions.
	Syntax:
		datatype  (*arrayname[ne])();
			ne --> no.of elements (integer constant).
eg. int (*aptf[5])();
		Read as aptf[] is an array which can hold the starting addresses of 5 functions
that returns integer values.
*/

#include <stdio.h>
void main()
{
	int x, y, res;

	int add(int, int);		// function prototype
	int sub(int, int);
	int mul(int, int);

	int (*aptf[3])(int, int);	// array of function pointers declaration

	aptf[0] = add;
	aptf[1] = sub;
	aptf[2] = mul;

	printf("\nStarting address of add() = %u",add);
	printf("\nContents of pointer variable, aptf[0] = %u\n",aptf[0]);

	printf("\nStarting address of sub() = %u",sub);
	printf("\nContents of pointer variable, aptf[1] = %u\n",aptf[1]);

	printf("\nStarting address of mul() = %u",mul);
	printf("\nContents of pointer variable, aptf[2] = %u\n",aptf[2]);

	printf("\nEnter two integer values :\n");
	scanf("%d%d",&x, &y);

	for(int i=0; i<3; i++)
	{
		switch(i)
		{
		case 0:
			printf("\nAddition       :  %3d\t    %3d\t    %3d",add(x,y), (*aptf[i])(x,y), aptf[i](x,y));
			break;
		case 1:
			printf("\nSubtraction    :  %3d\t    %3d\t    %3d",sub(x,y), (*aptf[i])(x,y), aptf[i](x,y));
			break;
		case 2:
			printf("\nMultiplication :  %3d\t    %3d\t    %3d",mul(x,y), (*aptf[i])(x,y), aptf[i](x,y));
			break;
		}
	}

	printf("\n\n");
}

int add(int x, int y)
{
	return x+y;
}

int sub(int x, int y)
{
	return x-y;
}

int mul(int x, int y)
{
	return x*y;
}

Output :

Starting address of add() = 4264436
Contents of pointer variable, aptf[0] = 4264436

Starting address of sub() = 4265111
Contents of pointer variable, aptf[1] = 4265111

Starting address of mul() = 4265071
Contents of pointer variable, aptf[2] = 4265071

Enter two integer values :
10
-3

Addition       :    7         7       7
Subtraction    :   13        13      13
Multiplication :  -30       -30     -30

Press any key to continue

/* Program 41 : Using pointers to functions, find the minimum and maximum value of the
given numbers. */

#include <stdio.h>
void main()
{
	int num[20], sz;
	int *pmin, *pmax;
	char ch='y';

	void enter(int*, int);		// function prototype
	int* minValue(int*, int);
	int* maxValue(int*, int);

	void (*ptf)(int*, int);
	int* (*ptfmin)(int*, int);
	int* (*ptfmax)(int*, int);

	do
	{
		if(ch == 'y')
			printf("\nEnter size of the array (max. 20) :  ");
		else
		{
			printf("\n%d is Invalid Input.",sz);
			printf("\nEnter the valid size of the array (between 1 to 20 only) :  ");
		}
		scanf("%d",&sz);
		if(sz<=0 || sz>20)
			ch='n';
	}while(sz<=0 || sz>20);

	ptf = enter;
	ptfmin = minValue;
	ptfmax = maxValue;

	ptf(num, sz);	
	// (*ptf)(num, sz) = enter(num, sz);
	
	//pmin = ptfmin(num, sz);	
	pmin = (*ptfmin)(num, sz);
	// pmin = minValue(num, sz);

	pmax = ptfmax(num, sz);
	// pmax = (*ptfmax)(num, sz);
	// pmax = maxValue(num, sz);

	printf("\nMinimum value = %3d", *pmin);
	printf("\nmaximum value = %3d", *pmax);

	printf("\n\n");
}

void enter(int *ip, int sz)
{
	for(int i=0; i<sz; i++)
	{
		printf("Enter value %d :  ",i+1);
		scanf("%d",(ip+i));
	}
}

int* minValue(int *ip, int sz)
{
	int *pmin , min;

	min = *(ip+0);
	pmin = (ip+0);

	for(int i=1; i<sz; i++)
	{
		if(*(ip+i) < min)	// if(ip[i] < min)
		{
			min = *(ip+i);	// min = ip[i];
			pmin = (ip+i);
		}
	}
	printf("\nFrom function : Minimum value : %3d\t\t%3d\n", *pmin, min);
	return pmin;
}

int* maxValue(int *ip, int sz)
{
	int *pmax , max;

	max = *(ip+0);
	pmax = (ip+0);

	for(int i=1; i<sz; i++)
	{
		if(*(ip+i) > max)	// if(ip[i] > max)
		{
			max = *(ip+i);	// max = ip[i];
			pmax = (ip+i);
		}
	}
	printf("\nFrom function : Maximum value : %3d\t\t%3d\n", *pmax, max);
	return pmax;

}

Output : 

Enter size of the array (max. 20) :  -7

-7 is Invalid Input.
Enter the valid size of the array (between 1 to 20 only) :  21

21 is Invalid Input.
Enter the valid size of the array (between 1 to 20 only) :  7
Enter value 1 :  265
Enter value 2 :  95
Enter value 3 :  34
Enter value 4 :  -584
Enter value 5 :  254
Enter value 6 :  -69
Enter value 7 :  75

From function : Minimum value : -584            -584

From function : Maximum value : 265             265

Minimum value = -584
maximum value = 265

Press any key to continue

/* Program 42 :  Important Points

1. int ip;
	Read as ip is a variable that can hold an integer value.

2. int ip[20];
	Read as ip[] is an integer array that can hold a maximum of 20 integer values.

3. int ip();
	Read as ip is a function which receives void and returns an integer value.

4. int *ip;
	Read as ip is a pointer variable that can hold the starting address of an 
		integer value.

5. int **ip;
	Read as ip is a pointer to pointer variable that can hold the starting
		address of an integer pointer.

6. int *ip[20];
	Read as ip[] is an array of pointers that can hold maximum of 20 starting 
		addresses of integer variables.

7. int* ip();
	Read as ip() is a function which receives void and returns an integer pointer
		(i.e., returns the starting address of an integer variable).

8. int (*ip)();
	Read as ip is a pointer variable that can hold the starting address of a 
		function that returns integer value.

9. int* (*ip)();
	Read as ip is a pointer variable that can hold the starting address of a function
		that returns an integer pointer.

10. int (*ip[20])();
	Read as ip[] is an array of pointers which can hold the starting addresses of 20
		functions that returns an integer value.

11. int* (*ip[20])();
	Read as ip[] is an array of pointers which can hold the starting addresses of 20
		functions that returns an integer pointer.

*/
